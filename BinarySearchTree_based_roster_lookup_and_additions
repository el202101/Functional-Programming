

(define-struct rnode (student left right))
;; A Roster Node (RN) is a (make-rnode Student Roster Roster)
;; Requires: all students in the left subtree have an ID < student's ID
;;           all students in the right subtree have an ID > student's ID

;; A Roster is one of 
;; * empty
;; * RN


;; =============================================================================
;; constants used in Q1 examples
;; =============================================================================

(define beth (make-student 12345678 "Beth" 96))
(define jenny (make-student 08675309 "Jenny" 81))
(define john1 (make-student 48975311 "John" 95))
(define jenny/new (make-student 08675309 "Jen" 81))
(define john2 (make-student 20488192 "John" false))
(define tim (make-student 0 "tim" false))
(define beth/new (make-student 12345678 "Betty" 96))

(define sample-roster
  (make-rnode beth ; root
              (make-rnode jenny empty empty)   ; left child
              (make-rnode john1 empty empty))) ; right child

(define sample-roster-2
  (make-rnode beth 
              (make-rnode jenny/new empty empty)
              (make-rnode john1
                          (make-rnode john2 empty empty)
                          empty)))
(define sample-roster-3
  (make-rnode tim empty empty))

(define sample-roster-4
(make-rnode beth
            (make-rnode jenny 
                 (make-rnode tim empty empty) empty)
            (make-rnode john1 empty empty)))


;;******* Q1a ********

;; (find-student studentid roster) produces the student from a roster by identifying students
;; by their ID and false if the student-id is not on the roster
;; Examples:
(check-expect (find-student 12345678 sample-roster ) beth)
(check-expect (find-student 87654321 sample-roster ) false)

;; find-student: StudentID Roster -> Student
(define (find-student studentid roster)
  (cond [(empty? roster) false]
        [(= studentid (student-id (rnode-student roster))) (rnode-student roster)]
        [(< studentid (student-id (rnode-student roster)))
            (find-student studentid (rnode-left roster))]
        [ else (find-student studentid (rnode-right roster))]))

;; Tests:
(check-expect (find-student 08675309 sample-roster-2) jenny/new)
(check-expect (find-student 08675309 sample-roster) jenny)

;;******* Q1b ********

;; (class-average roster) produces the class average of a roster
;; Examples:
(check-expect (class-average sample-roster) (+ 90 2/3))
(check-expect (class-average sample-roster-2) (+ 90 2/3))
(check-expect (class-average empty) 'N/A)

;; class-average: Roster -> Num
(define (class-average roster)
  (cond [(empty? roster) 'N/A]
        [else (/ (sum-average roster) (count roster))]))


;; (sum-average roster) produces the sum of the grades of students on a roster
;; Examples:
(check-expect (sum-average sample-roster) 272)
(check-expect (sum-average sample-roster-2) 272)
(check-expect (sum-average empty) 0)

;; sum-average: Roster -> Nat
(define (sum-average roster)
  (cond [(empty? roster) 0]
        [else (+ (average roster)
                 (sum-average (rnode-left roster))
                 (sum-average (rnode-right roster)))]))


;; (averages student) produces the average of a student at the root of a roster if they have one
;; if not produces 0
;; Examples:
(check-expect (average sample-roster) 96)
(check-expect (average (make-rnode (make-student "Harry" 09 false)
                                   (make-rnode jenny empty empty)
                                   (make-rnode john1 empty empty))) 0)  

;; average: Student -> (anyof Nat Bool)
(define (average student)
  (cond [(equal? false (student-grade (rnode-student student))) 0]
                       [else (student-grade (rnode-student student))]))


;; (count roster) counts the number of students on a roster who have grades
;; Examples:
(check-expect (count sample-roster) 3)
(check-expect (count sample-roster-2) 3)
(check-expect (count empty) 0)

;; count: Roster -> Nat 
(define (count roster)
  (cond [(empty? roster) 0]
        [else (count-students roster)]))


;; (count-students roster)  counts the number of students on a roster who have grades
;; Examples: wrapper function for count

;; count-students: Roster -> Nat
(define (count-students roster)
  (+ (cond [(equal? (student-grade (rnode-student roster)) false) 0]
                         [else 1])
                 (count (rnode-left roster))
                 (count (rnode-right roster))))
                        
;;******* Q1c ********

;; (find-student/name name roster) produces a list of all the students
;; with a specific name on a roster
;; and empty if no name matches
;; Examples:
(check-expect (find-student/name "Beth" sample-roster) (list beth))
(check-expect (find-student/name "Dan" sample-roster) empty)

;; find-student/name: Str Roster -> (listof Student)
(define (find-student/name name roster)
  (cond [(empty? roster) empty]
        [else (find-name name roster)]))

;; Tests:
(check-expect (find-student/name "John" sample-roster-2) (list john2 john1))
(check-expect (find-student/name "Jen" sample-roster-2) (list jenny/new))

;; (find-name name roster) produces a list of all the students
;; with a specific name on a roster
;; Examples: wrapper function for find-student/name

;; find-name: Str Roster -> (listof Student)
(define (find-name name roster )
  (append (find-student/name name (rnode-left roster))
         (cond [(equal? name (student-name (rnode-student roster)))
                            (cons (rnode-student roster) empty)]
                            [else empty])
                      (find-student/name name (rnode-right roster))))
                          
;;******* Q1d ********

;; (add-students lostudents roster) produces a new roster adding new students from
;; a list of students lostudents and updating names
;; Examples:
(check-expect (add-students (list (list 20488192 "John")
(list 8675309 "Jen")) sample-roster) sample-roster-2)
(check-expect (add-students empty empty) empty)

;; add-students: (listof (list StudentID Str)) Roster -> Roster
;; Required: studentid is unique
(define (add-students lostudents roster)
   (cond [(empty? roster) empty]
         [(empty? lostudents) roster]
         [else (add-students (rest lostudents) (addStudent (first lostudents) roster))]))

;; Tests:
(check-expect (add-students (list (list 0 "tim" )) sample-roster) sample-roster-4)
(check-expect (add-students empty sample-roster-2) sample-roster-2)
(check-expect (add-students (list (list 20488192 "John") (list 8675309 "Jen")) empty) empty)


;; (addStudent student roster) takes the first student from the list of new/needing updates
;; students and adds/updates them on the roster
;; Examples: 
(check-expect (addStudent (list 20488192 "John") sample-roster) (make-rnode beth 
              (make-rnode jenny empty empty)
              (make-rnode john1
                          (make-rnode john2 empty empty)
                          empty)))

;; addStudent: (list StudentID Str) Roster -> Roster
(define (addStudent student roster)
   (addorupdateStudent (make-student (first student) (second student) false)  roster))


;; (addorupdateStudent) adds a new student to the roster or updates their name
;; Examples:
 (check-expect (addorupdateStudent jenny/new sample-roster-2) 
 (make-rnode (make-student 12345678 "Beth" 96)
 (make-rnode (make-student 8675309 "Jen" 81) empty empty)
 (make-rnode (make-student 48975311 "John" 95)
             (make-rnode (make-student 20488192 "John" false) empty empty) empty)))

;; addorupdateStudent: Student Roster -> Roster
(define (addorupdateStudent student sRoster)
  (cond [(empty? sRoster) (make-Roster-leaf student)]
        [(= (id student) (keyOfRootElement sRoster)) (updateStudentNameAtRoot student sRoster)]
        [(< (id student) (keyOfRootElement sRoster))
            (makeroster (rnode-student sRoster)
                        (addorupdateStudent student (rnode-left sRoster))
                        (rnode-right sRoster))]
        [(> (id student) (keyOfRootElement sRoster))
         (makeroster (rnode-student sRoster)
                     (rnode-left sRoster)
                     (addorupdateStudent student (rnode-right sRoster)))]))
        

;; (id student) produces a student's corresponding id number
;; Examples:
(check-expect (id tim) 0)
(check-expect (id beth) 12345678)

;; id: Student -> Nat
;; Required: Nat has less than 8 digits
(define (id student)
  (student-id student))


;; (keyOfRootElement roster) produces the id of the student at the root of the roster
;; Examples:
(check-expect (keyOfRootElement sample-roster) 12345678)
(check-expect (keyOfRootElement sample-roster-3) 0)

;; keyOfRootElement: Roster -> Nat
;; Required: Nat has less than 8 digits
(define (keyOfRootElement roster)
  (id (rnode-student roster)))


;;(makeroster student leftNode rightNode) produces a new roster with the update/added students
;; Examples:
(check-expect (makeroster beth (make-rnode jenny empty empty)   
              (make-rnode john1 empty empty)) sample-roster)

;; makeroster: Student RN RN -> Roster
(define (makeroster student leftNode rightNode)
   (make-rnode student leftNode rightNode))


;; (make-Roster-leaf student) creates a new RN for a new student
;; Examples:
(check-expect (make-Roster-leaf "Henry") (make-rnode "Henry" '() '()))
(check-expect (make-Roster-leaf "Sally") (make-rnode "Sally" '() '()))

;; make-Roster-leaf: Str -> RN
(define (make-Roster-leaf student)
   (makeroster student empty empty))


;; (updateStudentNameAtRoot student roster) updates a students name
;; if they are at the root of the tree/roster
;; Examples:
(check-expect (updateStudentNameAtRoot beth/new sample-roster)
(make-rnode beth/new
              (make-rnode jenny empty empty)   
              (make-rnode john1 empty empty)))

;; updateStudentNameAtRoot: Student Roster -> Roster
(define (updateStudentNameAtRoot student roster)
   (make-rnode (make-student
                  (student-id student)
                  (student-name student)
                  (student-grade (rnode-student roster)))
                  (rnode-left roster) (rnode-right roster))) 
